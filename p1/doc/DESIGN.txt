class Entity:
All of the following are functions that I added to the entity class because they return an object of 
Type entity:
+createBlacksmith(Point) : Entity<br>
+createMinerFull(int, Point, int, int) : Entity<br>
+createMinerNotFull(int, Point, int, int) : Entity<br>
+createObstacle(Point) : Entity<br>
+createOre(Point, int) : Entity<br>
+createOreBlob(Point, int, int) : Entity<br>
+createQuake(Point) : Entity<br>
+createVein(Point, int) : Entity<br>
+nextPositionMiner(Entity, WorldModel, Point) : Point<br> - changes the position of miner and changes the position of the entity
+executeMinerFullActivity(Entity, WorldModel, EventSchedule)  - makes the activity operate if full and changes the entity of the miner
+executeMinerNotFullActivity(Entity, WorldModel, EventSchedule)  - makes the activity work if not full and changes the entity of the miner
+executeOreActivity(Entity, WorldModel, EventSchedule)<br> - makes the Ore activity happen by using the position of the entity


+executeOreBlobActivity(Entity, WorldModel, EventSchedule)<br> - changes the entity’s properties


+executeQuakeActivity(Entity, WorldModel, EventSchedule)<br> - changes the property of an entity


+executeVeinActivity(Entity, WorldModel, EventSchedule)<br> - adds vein activity to event schedule




+moveToNotFull(Entity, WorldModel, Entity, EventSchedule) : boolean<br> - changes the position of the entity


+moveToFull(Entity, WorldModel, Entity, EventSchedule) : boolean<br> - changes position of entity


+moveToOreBlob(Entity, WorldModel, Entity, EventSchedule) : boolean<br> - moves the entity’s position to be at the oreblob


+nextPositionOreBlob(Entity, WorldModel, Point) : Point<br> - changes position of the entity of the ore blob


class Action:
+executeAction(Action, EventSchedule) - makes an event happen in Event Schedule, has to do with action class
+executeAnimationAction(Action, EventSchedule) - makes an action animate


class ActionKind:


class Point:
+adjacent(Point, Point) : boolean<br> -  returns true if points next to each other
+isOccupied(WorldModel, Point) : boolean<br> - returns true if occupied


+nearestEntity(List[Entity], Point) : Entity<br> - returns the nearest entity to the point


+distanceSquared(Point p1, Point p2) : int<br> - finds the distance between the points


+findNearest(WorldModel, Point, EntityKind) : Entity<br> - finds nearest entitykind of point passed in




+withinBounds(WorldModel, Point)<br> - returns true if point is within the bounds




class EventSchedule:
+scheduleActions(Entity, EventSchedule, WorldModel)<br> - schedules actions by adding to eventschedule


class Event:
+createAnimationAction(Entity, int) : Action<br> - creates actions for the event
+createActivityAction(Entity, WorldModel) : Action<br> - create activity that helps to create an event


class EntityKind:


class WorldModel:
+paint(WorldModel, AnimationFrame)<br> - paints the world model to frame
+addEntity(WorldModel, Entity)<br> - adds an entity to the world model


+moveEntity(WorldModel, Entity, Point)<br> - move an entity of a point in the world model 


+removeEntity(WorldModel, Entity)<br> - removes an entity from the world model 


+removeEntityAt(WorldModel, Point)<br> - removes entity from the world model for a specific point
+getOccupant(WorldModel, Point) : Entity<br> - returns the entity of the position of the occupant of the world model 


+getOccupantCell(WorldModel, Point) : Entity<br> - returns the entity at which the occupant of the world model is


+setOccupantCell(WorldModel, Point, Entity)<br> - sets the position of the occupants of the world model to be the entity
+transformNotFull(Entity, WorldModel, EventSchedule)<br> - schedules miner activity in event schedule and adds/removes entities of the world model 


+transformFull(Entity, WorldModel, EventSchedule)<br> - adds/removes entities to the world model
+findOpenAround(WorldModel, Point) : Point<br> - positions the ores in the world model


class VirtualWorld:
+getAnimationPeriod(Entity) : int - returns animation period of an entity which is an element of the virtual world
+nextImage(Entity) - takes in an Entity and returns image index which is 
+getCurrentTile(Entity) : Tile - returns tile index